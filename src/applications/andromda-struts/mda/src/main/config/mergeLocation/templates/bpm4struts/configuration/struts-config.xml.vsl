<?xml version="1.0" encoding="$xmlEncoding" ?>
#*
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  $Id: struts-config.xml.vsl 547187 2007-06-14 09:05:19Z ate $
*#
##
##  CONSTANTS
##
#if(!$applicationUseCases.empty)#set($applicationUseCase=$applicationUseCases.iterator().next())#end
#set ($useCases = $applicationUseCase.allUseCases)
#set ($validationDesired = ($clientValidation=='true' || $serverValidation=='true'))
##
##  START TEMPLATE
##
<!DOCTYPE struts-config PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 1.2//EN"
    "http://jakarta.apache.org/struts/dtds/struts-config_1_2.dtd">

<struts-config>

    <!-- display-name merge point -->

    <!-- description merge point -->

    <data-sources>
        <!-- data-sources merge point -->
    </data-sources>

    <form-beans>
        <!-- form-beans merge-point -->
#foreach ($useCase in $useCases)
#foreach ($action in $useCase.actions)
#if (!$action.actionFormFields.empty)
        <form-bean
            name="$action.formBeanName"
            type="$action.formBeanType" />
#end
#end
#end
#foreach ($manageable in $manageables)
        <form-bean name="$manageable.formBeanName" type="$manageable.formBeanType" />
#end
    </form-beans>

    <global-exceptions>
        <!-- global-exceptions merge point -->
        <exception
            handler="${exceptionHandlerPackage}.PatternMatchingExceptionHandler"
            type="java.lang.Throwable"
            key="error.exception.message"
            path="/error-page.jsp?code=exception&amp;exception=true"
            scope="request" />
    </global-exceptions>

    <global-forwards>
        <!-- global-forwards merge-point -->
#foreach ($useCase in $useCases)
        <forward
            name="$stringUtils.toResourceMessageKey($useCase.name)"
            path="${useCase.actionPath}.do"
            redirect="true" />
#end
    </global-forwards>

    <action-mappings>
        <!-- action-mappings merge-point -->
#foreach ($useCase in $useCases)
#foreach ($action in $useCase.actions)
        <action
            path="$action.actionPath"
            type="$action.actionType"
#if (!$action.actionFormFields.empty)
            name="$action.formBeanName"
#end
#set ($roles = $action.actionRoles)
#if ($stringUtils.isNotBlank($securityRealm) && $stringUtils.isNotBlank($roles) && $useCase.secured)
            roles="$roles"
#end
            scope="$action.actionScope"
#if ($action.useCaseStart == false)
            input="${action.input.fullPath}.jsp"
#end
            unknown="false"
#set ($validate = $action.validationRequired && $validationDesired)
            validate="$validate">
#set ($actionExceptions = $action.actionExceptions)
#foreach ($actionException in $actionExceptions)
            <exception
                handler="${exceptionHandlerPackage}.PatternMatchingExceptionHandler"
                type="$actionException.exceptionType"
                key="${action.messageKey}.$actionException.exceptionKey"
                path="$actionException.exceptionPath"
                scope="request" />
#end
#if ($actionExceptions.empty && !$action.useCaseStart)
            <exception
                handler="${exceptionHandlerPackage}.PatternMatchingExceptionHandler"
                type="java.lang.Exception"
                key="${action.messageKey}.exception"
                path="${action.input.fullPath}.jsp"
                scope="request" />
#end
#foreach ($actionForward in $action.actionForwards)
            <forward
                name="$actionForward.forwardName"
##
##  when direct page access is prevented we cannot redirect to pages,
##  so we need to redirect to a page forward actioninstead
##  (they are declared a bit further down the template)
##
#if ($preventDirectPageAccess == "true" && $actionForward.enteringPage)
#set ($pageActionName = "$stringUtils.upperCamelCaseName($actionForward.target.name)")
                path="${useCase.actionPathRoot}/${pageActionName}PageForward.do"
#else
                path="$actionForward.forwardPath"
#end
                redirect="$action.redirect" />
#end
        </action>
#end
#if ($onlineHelp == "true")
        <action
            path="${useCase.onlineHelpActionPath}"
            type="org.apache.struts.actions.ForwardAction"
            scope="request"
            parameter="${useCase.onlineHelpPagePath}.jsp"/>
#foreach ($page in $useCase.pages)
        <action
            path="${page.onlineHelpActionPath}"
            type="org.apache.struts.actions.ForwardAction"
            scope="request"
            parameter="${page.onlineHelpPagePath}.jsp"/>
#end
#end
#if ($preventDirectPageAccess == "true")
##
##  these actions merely forward to pages because the pages aren't to be accessed directly by the client
##  (eg. via a redirect)
##
#foreach ($page in $useCase.pages)
        <action
#set ($pageActionName = "$stringUtils.upperCamelCaseName($page.name)")
            path="${useCase.actionPathRoot}/${pageActionName}PageForward"
            type="org.apache.struts.actions.ForwardAction"
            scope="request"
            parameter="${page.fullPath}.jsp"/>
#end
#end
#end
#foreach ($manageable in $manageables)
        <action
            path="$manageable.actionPath"
            type="$manageable.actionType"
            name="$manageable.formBeanName"
            scope="request"
            input="$manageable.pageFullPath"
            unknown="false"
            validate="false"
            parameter="$manageable.actionParameter">
            <exception
                handler="${exceptionHandlerPackage}.PatternMatchingExceptionHandler"
                type="java.lang.Throwable"
                key="$manageable.exceptionKey"
                path="$manageable.exceptionPath"
                scope="request" />
        </action>
#if ($onlineHelp == "true")
        <action
            path="$manageable.onlineHelpActionPath"
            type="org.apache.struts.actions.ForwardAction"
            scope="request"
            input="${manageable.actionPath}.do"
            parameter="${manageable.onlineHelpPagePath}.jsp"/>
#end
#end
#if ($onlineHelp == "true")
        <action
            path="/applicationHelp"
            type="org.apache.struts.actions.ForwardAction"
            scope="request"
            parameter="/application-help.jsp"/>
#end
        <action
            path="/calendar"
            type="org.apache.struts.actions.ForwardAction"
            scope="request"
            parameter="/calendar-js.jsp"/>
        <action
            path="/formValidation"
            type="org.apache.struts.actions.ForwardAction"
            scope="request"
            parameter="/form-validation.jsp"/>
        <action
            path="/login"
            type="org.apache.struts.actions.ForwardAction"
            scope="request"
            parameter="/login/login-form.jsp"/>
    </action-mappings>

    <!-- controller merge point -->

    <!-- message-resources merge-point -->
    <message-resources parameter="application-resources" null="false"/>

    <!-- plug-in merge-point -->
#if ($applicationUseCase.applicationValidationRequired && $validationDesired)
    <plug-in className="org.apache.struts.validator.ValidatorPlugIn">
        <set-property property="pathnames" value="/WEB-INF/validation.xml,/WEB-INF/validator-rules.xml"/>
        <set-property property="stopOnFirstError" value="false"/>
    </plug-in>

#end
    <plug-in className="org.apache.struts.tiles.TilesPlugin">
        <set-property property="definitions-config" value="/WEB-INF/tiles-defs.xml"/>
        <set-property property="definitions-parser-validate" value="true"/>
        <set-property property="moduleAware" value="true"/>
    </plug-in>

<!--
  UNCOMMENT TO EXPOSE THE STRUTS-MENU TAGLIB

    <plug-in className="net.sf.navigator.menu.MenuPlugIn">
        <set-property property="menuConfig" value="/WEB-INF/menu-config.xml"/>
    </plug-in>
-->
</struts-config>